import ctypes

class CType(ctypes.Structure):
    pass

from .VkConformanceVersion import CType as VkConformanceVersion

CType._fields_ = [
    ('sType', ctypes.c_int),
    ('pNext', ctypes.c_void_p),
    ('driverID', ctypes.c_int),
    ('driverName', ctypes.ARRAY(ctypes.c_char, 256)),
    ('driverInfo', ctypes.ARRAY(ctypes.c_char, 256)),
    ('conformanceVersion', VkConformanceVersion),
    ('denormBehaviorIndependence', ctypes.c_int),
    ('roundingModeIndependence', ctypes.c_int),
    ('shaderSignedZeroInfNanPreserveFloat16', ctypes.c_uint32),
    ('shaderSignedZeroInfNanPreserveFloat32', ctypes.c_uint32),
    ('shaderSignedZeroInfNanPreserveFloat64', ctypes.c_uint32),
    ('shaderDenormPreserveFloat16', ctypes.c_uint32),
    ('shaderDenormPreserveFloat32', ctypes.c_uint32),
    ('shaderDenormPreserveFloat64', ctypes.c_uint32),
    ('shaderDenormFlushToZeroFloat16', ctypes.c_uint32),
    ('shaderDenormFlushToZeroFloat32', ctypes.c_uint32),
    ('shaderDenormFlushToZeroFloat64', ctypes.c_uint32),
    ('shaderRoundingModeRTEFloat16', ctypes.c_uint32),
    ('shaderRoundingModeRTEFloat32', ctypes.c_uint32),
    ('shaderRoundingModeRTEFloat64', ctypes.c_uint32),
    ('shaderRoundingModeRTZFloat16', ctypes.c_uint32),
    ('shaderRoundingModeRTZFloat32', ctypes.c_uint32),
    ('shaderRoundingModeRTZFloat64', ctypes.c_uint32),
    ('maxUpdateAfterBindDescriptorsInAllPools', ctypes.c_uint32),
    ('shaderUniformBufferArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('shaderSampledImageArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('shaderStorageBufferArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('shaderStorageImageArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('shaderInputAttachmentArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('robustBufferAccessUpdateAfterBind', ctypes.c_uint32),
    ('quadDivergentImplicitLod', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindSamplers', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindUniformBuffers', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindStorageBuffers', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindSampledImages', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindStorageImages', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindInputAttachments', ctypes.c_uint32),
    ('maxPerStageUpdateAfterBindResources', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindSamplers', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindUniformBuffers', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindUniformBuffersDynamic', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindStorageBuffers', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindStorageBuffersDynamic', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindSampledImages', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindStorageImages', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindInputAttachments', ctypes.c_uint32),
    ('supportedDepthResolveModes', ctypes.c_uint32),
    ('supportedStencilResolveModes', ctypes.c_uint32),
    ('independentResolveNone', ctypes.c_uint32),
    ('independentResolve', ctypes.c_uint32),
    ('filterMinmaxSingleComponentFormats', ctypes.c_uint32),
    ('filterMinmaxImageComponentMapping', ctypes.c_uint32),
    ('maxTimelineSemaphoreValueDifference', ctypes.c_uint64),
    ('framebufferIntegerColorSampleCounts', ctypes.c_uint32),
]

descriptor = {
    'extends': {
        'VkPhysicalDeviceProperties2',
    },
    'extended_by': set(),
    'includes': {
        'VkConformanceVersion',
    },
    'included_in': set(),
    'input_of': set(),
    'output_of': set(),
    'member_map': {
        'sType': {'python_name': ['s', 'type'], 'value': 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES', 'type': 'VkStructureType'},
        'pNext': {'python_name': ['p', 'next']},
        'driverID': {'python_name': ['driver', 'id'], 'type': 'VkDriverId'},
        'driverName': {'python_name': ['driver', 'name'], 'len': [['null-terminated']]},
        'driverInfo': {'python_name': ['driver', 'info'], 'len': [['null-terminated']]},
        'conformanceVersion': {'python_name': ['conformance', 'version'], 'type': 'VkConformanceVersion'},
        'denormBehaviorIndependence': {'python_name': ['denorm', 'behavior', 'independence'], 'type': 'VkShaderFloatControlsIndependence'},
        'roundingModeIndependence': {'python_name': ['rounding', 'mode', 'independence'], 'type': 'VkShaderFloatControlsIndependence'},
        'shaderSignedZeroInfNanPreserveFloat16': {'python_name': ['shader', 'signed', 'zero', 'inf', 'nan', 'preserve', 'float16']},
        'shaderSignedZeroInfNanPreserveFloat32': {'python_name': ['shader', 'signed', 'zero', 'inf', 'nan', 'preserve', 'float32']},
        'shaderSignedZeroInfNanPreserveFloat64': {'python_name': ['shader', 'signed', 'zero', 'inf', 'nan', 'preserve', 'float64']},
        'shaderDenormPreserveFloat16': {'python_name': ['shader', 'denorm', 'preserve', 'float16']},
        'shaderDenormPreserveFloat32': {'python_name': ['shader', 'denorm', 'preserve', 'float32']},
        'shaderDenormPreserveFloat64': {'python_name': ['shader', 'denorm', 'preserve', 'float64']},
        'shaderDenormFlushToZeroFloat16': {'python_name': ['shader', 'denorm', 'flush', 'to', 'zero', 'float16']},
        'shaderDenormFlushToZeroFloat32': {'python_name': ['shader', 'denorm', 'flush', 'to', 'zero', 'float32']},
        'shaderDenormFlushToZeroFloat64': {'python_name': ['shader', 'denorm', 'flush', 'to', 'zero', 'float64']},
        'shaderRoundingModeRTEFloat16': {'python_name': ['shader', 'rounding', 'mode', 'rtefloat16']},
        'shaderRoundingModeRTEFloat32': {'python_name': ['shader', 'rounding', 'mode', 'rtefloat32']},
        'shaderRoundingModeRTEFloat64': {'python_name': ['shader', 'rounding', 'mode', 'rtefloat64']},
        'shaderRoundingModeRTZFloat16': {'python_name': ['shader', 'rounding', 'mode', 'rtzfloat16']},
        'shaderRoundingModeRTZFloat32': {'python_name': ['shader', 'rounding', 'mode', 'rtzfloat32']},
        'shaderRoundingModeRTZFloat64': {'python_name': ['shader', 'rounding', 'mode', 'rtzfloat64']},
        'maxUpdateAfterBindDescriptorsInAllPools': {'python_name': ['max', 'update', 'after', 'bind', 'descriptors', 'in', 'all', 'pools']},
        'shaderUniformBufferArrayNonUniformIndexingNative': {'python_name': ['shader', 'uniform', 'buffer', 'array', 'non', 'uniform', 'indexing', 'native']},
        'shaderSampledImageArrayNonUniformIndexingNative': {'python_name': ['shader', 'sampled', 'image', 'array', 'non', 'uniform', 'indexing', 'native']},
        'shaderStorageBufferArrayNonUniformIndexingNative': {'python_name': ['shader', 'storage', 'buffer', 'array', 'non', 'uniform', 'indexing', 'native']},
        'shaderStorageImageArrayNonUniformIndexingNative': {'python_name': ['shader', 'storage', 'image', 'array', 'non', 'uniform', 'indexing', 'native']},
        'shaderInputAttachmentArrayNonUniformIndexingNative': {'python_name': ['shader', 'input', 'attachment', 'array', 'non', 'uniform', 'indexing', 'native']},
        'robustBufferAccessUpdateAfterBind': {'python_name': ['robust', 'buffer', 'access', 'update', 'after', 'bind']},
        'quadDivergentImplicitLod': {'python_name': ['quad', 'divergent', 'implicit', 'lod']},
        'maxPerStageDescriptorUpdateAfterBindSamplers': {'python_name': ['max', 'per', 'stage', 'descriptor', 'update', 'after', 'bind', 'samplers']},
        'maxPerStageDescriptorUpdateAfterBindUniformBuffers': {'python_name': ['max', 'per', 'stage', 'descriptor', 'update', 'after', 'bind', 'uniform', 'buffers']},
        'maxPerStageDescriptorUpdateAfterBindStorageBuffers': {'python_name': ['max', 'per', 'stage', 'descriptor', 'update', 'after', 'bind', 'storage', 'buffers']},
        'maxPerStageDescriptorUpdateAfterBindSampledImages': {'python_name': ['max', 'per', 'stage', 'descriptor', 'update', 'after', 'bind', 'sampled', 'images']},
        'maxPerStageDescriptorUpdateAfterBindStorageImages': {'python_name': ['max', 'per', 'stage', 'descriptor', 'update', 'after', 'bind', 'storage', 'images']},
        'maxPerStageDescriptorUpdateAfterBindInputAttachments': {'python_name': ['max', 'per', 'stage', 'descriptor', 'update', 'after', 'bind', 'input', 'attachments']},
        'maxPerStageUpdateAfterBindResources': {'python_name': ['max', 'per', 'stage', 'update', 'after', 'bind', 'resources']},
        'maxDescriptorSetUpdateAfterBindSamplers': {'python_name': ['max', 'descriptor', 'set', 'update', 'after', 'bind', 'samplers']},
        'maxDescriptorSetUpdateAfterBindUniformBuffers': {'python_name': ['max', 'descriptor', 'set', 'update', 'after', 'bind', 'uniform', 'buffers']},
        'maxDescriptorSetUpdateAfterBindUniformBuffersDynamic': {'python_name': ['max', 'descriptor', 'set', 'update', 'after', 'bind', 'uniform', 'buffers', 'dynamic']},
        'maxDescriptorSetUpdateAfterBindStorageBuffers': {'python_name': ['max', 'descriptor', 'set', 'update', 'after', 'bind', 'storage', 'buffers']},
        'maxDescriptorSetUpdateAfterBindStorageBuffersDynamic': {'python_name': ['max', 'descriptor', 'set', 'update', 'after', 'bind', 'storage', 'buffers', 'dynamic']},
        'maxDescriptorSetUpdateAfterBindSampledImages': {'python_name': ['max', 'descriptor', 'set', 'update', 'after', 'bind', 'sampled', 'images']},
        'maxDescriptorSetUpdateAfterBindStorageImages': {'python_name': ['max', 'descriptor', 'set', 'update', 'after', 'bind', 'storage', 'images']},
        'maxDescriptorSetUpdateAfterBindInputAttachments': {'python_name': ['max', 'descriptor', 'set', 'update', 'after', 'bind', 'input', 'attachments']},
        'supportedDepthResolveModes': {'python_name': ['supported', 'depth', 'resolve', 'modes'], 'type': 'VkResolveModeFlags'},
        'supportedStencilResolveModes': {'python_name': ['supported', 'stencil', 'resolve', 'modes'], 'type': 'VkResolveModeFlags'},
        'independentResolveNone': {'python_name': ['independent', 'resolve', 'none']},
        'independentResolve': {'python_name': ['independent', 'resolve']},
        'filterMinmaxSingleComponentFormats': {'python_name': ['filter', 'minmax', 'single', 'component', 'formats']},
        'filterMinmaxImageComponentMapping': {'python_name': ['filter', 'minmax', 'image', 'component', 'mapping']},
        'maxTimelineSemaphoreValueDifference': {'python_name': ['max', 'timeline', 'semaphore', 'value', 'difference']},
        'framebufferIntegerColorSampleCounts': {'python_name': ['framebuffer', 'integer', 'color', 'sample', 'counts'], 'type': 'VkSampleCountFlags'},
    }
}
